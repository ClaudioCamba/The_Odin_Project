---------------------
TOP | ASKING FOR HELP
---------------------

Q: Name at least one thing your question should always include.
A: Always include information on what solutions you have attempted accompanied by the code (enough code to allow the helper to replicate the issue).

Q: Describe the “XY Problem”.
A: When a user wants to do X and thinks Y is the solution and asks for help solving Y but Y may not actually be the solution which resorts to time wasted. 

Q: Describe three attributes of a “help vampire”.
A1: Asks questions that can be googled
A2: Asks same questions others have already asked
A3: Isn't interested in getting his questions answered more than trying to get someone else to do their work.

---------------------
TOP | HOW DOES THE WEB WORK?
---------------------

Q: What is a network?
A: A Network of cables connected to data centres which then connects to the user devices

Q: What is the internet?
A: It is an Infrastructure - Network of computers connected which allow the transfer of data

Q: What is an IP address?
A: Internet Protocol - A Unique string of numbers identifying your device address on the internet / local network - They help computers find each other

Q: What is a router?
A: Router is small device which makes sure the sent / received data (packets) reaches the correct location / destination

Q: What is an ISP?
A: Internet Service Provider e.g Virgin / Talktalk - They manage special routers that are all linked together and can also access other ISPs.

Q: What are packets and how are they used to transfer data?
A: Packets can be any form of data which are broken down into pieces (zeros and ones) which individually make way to the requested destination and reassemble to form the complete data - this allows the client to slowly load the data being received instead of waiting longer for the complete data.

Q: What is a client?
A: Client is the device requesting/receiving data/file form the server (Personal / Work - Computers / Phones)

Q: What is a server?
A: Super computer which stores multiple websites / apps (programs) - They are connected directly to the internet

Q: What is a web page?
A: A web page are file stored on servers hard drive which can be viewed on web browsers such as chrome, firefox and safari

Q: What is a web server?
A: A computer software and hardware that accepts HTTPS requests (website requests)

Q: What is a web browser?
A: Web browser is a piece of software that retrieves and displays web pages

Q: What is a search engine?
A: A Web service which helps you find other web pages e.g google, bing and yahoo

Q: What is a DNS request?
A: Domain Name System - DNS Request is when the client makes a request by accessing the DNS server which acts as the internet phonebook 

Q: Which browser are you currently using?
A: Google Chrome / Safari and occasionally firefox

Q: In your own words, explain what happens when you run a search on google.com.
A1: An IP request is made which goes through my ISP cables to a router that directs the request to the correct server which handles the request 
A2: The google site / file is broken into pieces called packets that are sent back to my IP address - independently the packets navigate to my IP utilising the routers and once they reach my IP they begin reassembling back to the complete file.

---------------------
COMMAND LINE BASICS
---------------------

Q: What is the command line?
A: (CLI) Command Line Interface is a program which allows you to enter commands that your computer will run for you.

Q: How do you open the command line on your computer?
A: CMD + SPACE - Search for "Terminal" to open the command line

Q: How can you navigate to a particular directory?
A: By entering "cd " followed by directory path e.g cd folder/folder/folder-destination

Q: Where will cd on its own navigate you to?
A: It will take you to the Home Directory (/Users/claudio-camba)

Q: Where will cd .. navigate you to?
A: It will navigate you one directory up the branch / Navigate one step out of current directory

Q: How do you display the name of the directory you are currently in?
A: By using the command "pwd" which logs your current directory

Q: How do you display the contents of the directory you are currently in?
A: by using the command "ls -l"

Q: How do you create a new directory?
A: By using the command "mkdir [folder]"

Q: How do you create a new file?
A: By using the command "touch [file]"

Q: How do you destroy a directory or file?
A: "rm -r [directory]" to remove directory and "rm -v [file]"

Q: How do you rename a directory or file?
A: By using the "mv" command e.g (mv script.js scrap.js)

---------------------
INTRODUCTION TO GIT
---------------------

Q: What kind of program is Git?
A: Git is a version control system which saves changes made to a file and allows the user to revert back to any of the saved check points.

Q: What are the differences between Git and a text editor in terms of what they save and their record keeping?
A: Git saves the updates made and keeps record of each saved point while a text editor saves the current file as it is and doesn't allow reverting back to previous saved points.

Q: Does Git work at a local or remote level?
A: Git works on both local and remote level - git saves locally and allows the data to be pushed online once access to the internet is established.

Q: Does GitHub work at a local or remote level?
A: Github works on a remote level as it is a website and can only be accessed via the internet.

Q: Why is Git useful for an individual developer?
A: Git is useful for individual developers because it allows them to recall previous version of the same file instead of saving multiple variations of the same file.

Q: Why are Git and GitHub useful for a team of developers?
A: They are both useful because they allow the developers to collaborate remotely at the same time and allows them to see each others updates. 

---------------------
GIT BASICS
---------------------

Q: How do you create a new repository on GitHub?
A: Login > Click Repositories Tab > Click Green Button "New" on the top right corner

Q: How do you copy a repository onto your local machine from GitHub?
A: By using the command "git clone [SSH]" with the correct SSH from the specific repository menu 

Q: What is the default name of your remote connection?
A: The default name for the remote connection is origin

Q: Explain what origin is in git push origin main.
A: The origin represents the remote name where the user wants to push the changes 

Q: Explain what main is in git push origin main.
A: Main is the name of the main branch in the repository where the changes are being pushed to

Q: Explain the two-stage system that Git uses to save files.
A: Add stage and commit stage are the two stages before pushing to repository

Q: How do you check the status of your current repository?
A: By using the command "git status"

Q: How do you add files to the staging area in git?
A: By using the command "git add [File]"

Q: How do you commit the files in the staging area and add a descriptive message?
A: By using the command "git commit -m "Message" "

Q: How do you push your changes to your repository on GitHub?
A: By using the command "git push origin main"

Q: How do you look at the history of your previous commits?
A: By using the command "git log"

---------------------
INTRODUCTION TO HTML AND  CSS
---------------------

Q: What do HTML and CSS stand for?
A: HTML = Hypertext Markup Language | CSS Cascading Style Sheet

Q: Between HTML and CSS, which would you use for putting paragraphs of text on a webpage?
A: Use HTML to place content (paragraphs) onto the page

Q: Between HTML and CSS, which would you use for changing the font and background color of a button?
A: CSS is used to make style changes to content on the page

---------------------
ELEMENTS AND TAGS
---------------------

Q: What is an HTML tag?
A: HTML tags are content wrappers - The browser interprets the tags into specific type of content on the page

Q: What are the three parts of an HTML element?
A: Opening tag, content and closing tag

---------------------
HTML BOILERPLATE
---------------------

Q: What is the purpose of the doctype declaration?
A: DOCTYPE lets the browser know which version of HTML is being used

Q: What is the HTML element?
A: The <html> element is the root element which wraps all the other elements within the document

Q: What is the purpose of the head element?
A: The <head> element is where the meta data and important elements for our webpages to render correctly

Q: What is the purpose of the body element?
A: The body element is where the content displayed on the web browser window is placed

---------------------
WORKING WITH TEXT
---------------------

Q: How do you create a paragraph in HTML?
A: By using the <p> tag

Q: How do you create a heading in HTML?
A: By using one of the <h1> to <h6> tags

Q: How many different levels of headings are there and what is the difference between them?
A: There are 6 different levels of heading they differ in importance e.g <h1> has the highest importance

Q: What element should you use to make text bold and important?
A: The tag used to make text bold is <strong>

Q: What element should you use to make text italicized to add emphasis to it?
A: The <em> element is used to make text italic 

Q: What relationship does an element have with any nested elements within it?
A: the relationship between the two elements is parent (wrapper) and child (nested) 

Q: What relationship do two elements have if they are at the same level of nesting?
A: The relationship between two or more elements of the same nested level is siblings 

Q: How do you create HTML comments?
A: By wrapping your comment with <!-- COMMENT HERE --> tag/symbols

---------------------
LIST
---------------------

Q: What HTML tag is used to create an unordered list?
A: the tag to create unordered list is <ul>

Q: What HTML tag is used to create an ordered list?
A: The tag to create an ordered list is <ol>

Q: What HTML tag is used to create list items within both unordered and ordered lists?
A: The tag to create the list items within the ordered or unordered lists is <li>

---------------------
LINKS AND IMAGES
---------------------

Q: What element is used to create a link?
A: The element used to create links is <a>

Q: What is an attribute?
A: An attribute gives the element additional information and can act as settings for an element e.g anchor tags have href attribute which allows it to connect pages/sections

Q: What attribute tells links where to go to?
A: The "href" attribute tells the anchor links where to go

Q: What is the difference between an absolute and relative link?
A: Absolute link navigates to another domain/site and relative links navigate to the same domain/website

Q: Which element is used to display an image?
A: The <img> is used to show images on the page

Q: What two attributes do images always need to have?
A: The two attributes image elements always need are "href" and "alt"

Q: How do you access a parent directory in a filepath?
A: To access the parent directory via a filepath ../ is used

Q: What are the four main image formats that you can use for images on the web?
A: The four main image formats are "jpg, png, svg and gif"

---------------------
COMMIT MESSAGES
---------------------

Q: What are two benefits of having well-written commit messages and a good commit history?
A: Saves time familiarizing old code which inturn saves time
A: Allows colleagues to under stand what each commit does when collaborating

Q: How many characters should the subject line of your commit message be?
A: The subject line should be 50 characters

---------------------
CSS FOUNDATIONS
---------------------

Q: What are the main differences between external, internal, and inline CSS?
A: The main differences are their specificity and implementation methods - also external stylesheets allows for easier management and organisation

Q: What is the syntax for class and ID selectors?
A: the syntax for class is "." and for ID "#"

Q: How would you apply a single rule to two different selectors?
A: You can apply one rule to two selectors by grouping the selectors and adding a comma between them

Q: Given an element that has an id of title and a class of primary, how would you use both attributes for a single rule?
A: I would use both  attributes like this ( #title.primary ) by chaining both attribute values

Q: What does the descendant combinator do?
A: The descendant combinator allows the style to target multiple elements regardless if its a child or parent element

Q: Between a rule that uses one class selector and a rule that uses three type selectors, which rule has the higher specificity?
A: The rule that uses one class selector would have a higher specificity

---------------------
INSPECTING HTML AND CSS
---------------------

Q: How do you select a specific element on your page with your browser’s developer tools?
A: You can select specific elements by right clicking the element and selecting inspect or within the inspect panel select the pointer tab and click the element you wish to inspect.

Q: What does a strikethrough in a CSS element mean in your browser’s developer tools?
A: It means the style has been overridden by another style with higher specificity

Q: How do you change CSS in real time on specific elements of a web page with your browser’s developer tools?
A: You can change an elements styling in real time by inspecting it and making changes to its current styling within the CSS Style tab

---------------------
THE BOX MODEL
---------------------

Q: From inside to outside, what is the order of box-model properties?
A: Margin, Border, Padding and content

Q: What does the box-sizing CSS property do?
A: The box-sizing CSS property sets how the total width and height of an element is calculated.

Q: What is the difference between the standard and alternative box model?
A: The standard box model calculates the height and width by the content and the alternative uses the border, padding and content.

Q: Would you use margin or padding to create more space between 2 elements?
A: I would use margin to create space between two elements

Q: Would you use margin or padding to create more space between the contents of an element and its border?
A: I would use padding to create space between the element content and its border 

Q: Would you use margin or padding if you wanted two elements to overlap each other?
A: I would use margin if I wanted two element to overlap each other

---------------------
BLOCK AND INLINE
---------------------

Q: What is the difference between a block element and an inline element?
A: Block elements start on a new line and inline elements appear beside elements they are placed next to

Q: What is the difference between an inline element and an inline-block element?
A: inline block element behaves similarly to inline element but contain block styled padding and margins 

Q: Is an h1 block or inline?
A: block

Q: Is button block or inline?
A: inline

Q: Is div block or inline?
A: block

Q: Is span block or inline?
A: inline

---------------------
INTRODUCTION TO FLEXBOX
---------------------

Q: What’s the difference between a flex container and a flex item?
A: Flex container applies to the parent element and its impact on its child elements and flex item focuses on the individual element.
A: A flex container is any element that has "display: flex" on it. A flex item is any element that lives directly inside of a flex container.

Q: How do you create a flex item?
A: By setting the direct parent container to "display: flex".

---------------------
GROWING AND SHRINKING
---------------------

Q: What are the 3 values defined in the shorthand flex property (e.g. flex: 1 1 auto)?
A: Flex-grow, flex-shrink and flex-basis (flex: 1 1 auto)

---------------------
AXES
---------------------

Q: How do you make flex items arrange themselves vertically instead of horizontally?
A: By setting the flex-direction property to column (flex-direction : column) to the flex-container

Q: In a column flex-container, what does flex-basis refer to?
A: Flex-basis refers to height in a colum flex-container

Q: In a row flex-container, what does flex-basis refer to?
A: Flex-basis refers to width on a tow 

Q: Why do the previous two questions have different answers?
A: Because flex-direction colum align the direct children vertically and row aligns them horizontally

---------------------
ALIGNMENT
---------------------

Q: What is the difference between justify-content and align-items?
A: Align-items is used to align elements vertically and justify-content is used to align horizontally

Q: How do you use flexbox to completely center a div inside a flex container?
A: by setting the container element display: flex; align-items: center; justify-content: center

Q: What’s the difference between justify-content: space-between and justify-content: space-around?
A: space-between equally spaces elements without spaces on the outer sections whilst space-around spaces the elements evenly but it also adds spaces between elements and the edges

---------------------
FUNDAMENTALS PART 1
---------------------

Q: Name the three ways to declare a variable?
A: The three ways to declare a variable is by using var, let and const.

Q: Which of the three variable declarations should you avoid and why?
A: You should avoid using the 'var' declaration because it is less error prone also functions similarly to let

Q: What rules should you follow when naming variables?
A: Only use letters, numbers and symbols, don't start name with a number or a capital letter and follow the camelCase approach

Q: What should you look out for when using the + operator with numbers and strings?
A: The operator + functions differently with number and strings - it merges (concatenates) them

Q: How does the % operator work?
A: The % works as a remainder operator e.g 5%2 = 1 

Q: Explain the difference between == and ===.
A: == equals to and === equals value and type (string / number) - 5 == '5'// true | 5 === '5' // false 

Q: When would you receive a NaN result?
A: When trying to do arithmetic with a non-numeric string

Q: How do you increment and decrement a number?
A: '++' is used to increment and '--' is used to decrement

Q: Explain the difference between prefixing and post-fixing increment/decrement operators.
A: prefix is when the operator is before the variable and postfix is when it's after

Q: What is operator precedence and how is it handled in JS?
A: Every operator has a corresponding precedence number. The one with the larger number executes first. If the precedence is the same, the execution order is from left to right.

Q: How do you access developer tools and the console?
A: By opening the Devtool and selecting the console tab from the tab options 

Q: How do you log information to the console?
A: You log information in the console by using the 'console.log' function

Q: What does unary plus operator do to string representations of integers?
A: It converts the integers type into number

---------------------
FUNDAMENTALS PART 2
---------------------

Q: What are the eight data types in JavaScript?
A: number, string, boolean, null, Bigint, undefined, object and symbol.

Q: Which data type is NOT primitive?
A: Object and symbols

Q: What is the relationship between null and undefined?
A: They both represent a missing element or value

Q: What is the difference between single, double, and backtick quotes for strings?
A: There is very little difference between single and double quotes but backtick quote allows for template literal

Q: What is the term for embedding variables/expressions in a string?
A: The term used for embedding into a string is "Concatenating" 

Q: Which type of quote lets you embed variables/expressions in a string?
A: The backtick quote allows you to embed variables/expressions

Q: How do you embed variables/expressions in a string?
A: By adding the variable name surrounded by these ${[variable here]} symbols

Q: How do you escape characters in a string?
A: By adding a backslash before the character

Q: What is the difference between the slice/substring/substr string methods?
A: slice - accepts negative values and extracts values between the 2 parameter index / substring - doesn't accept negative values / substr - the second parameter specifies the length of the extracted part

Q: What are the three logical operators and what do they stand for?
A: || - OR / && - AND / ! - NOT

Q: What are the comparison operators?
A: They are operators that compare the values and return a Booleon true/false value

Q: What are truthy and falsy values?
A: Truthy values are values that evaluate to True in a boolean context. Falsy values are values that evaluate to False in a boolean context

Q: What are the falsy values in JavaScript?
A: A number 0, an empty string "", null, undefined, and NaN all become false. 

Q: What are conditionals?
A: Conditions are statements which evaluate particular parameters and execute if return true
- Use if to specify a block of code to be executed, if a specified condition is true
- Use else to specify a block of code to be executed, if the same condition is false
- Use else if to specify a new condition to test, if the first condition is false
- Use switch to specify many alternative blocks of code to be executed

Q: What is the syntax for an if/else conditional?
A: if (condition) { 
        code if true 
    } else { 
        code if not true 
    };

Q: What is the syntax for a switch statement?
A: switch (new Date().getDay()) {
  case 0:
    day = "Sunday";
    break;
  case 1:
    day = "Monday";
    break;
  case 2:
    day = "Tuesday";
  }

Q: What is the syntax for a ternary operator?
A: ( condition ) ? run this code : run this code instead

Q: What is nesting?
A: Nesting is when placing a statement within another statement e.g putting one if...else statement inside another one — to nest them.

---------------------
JAVASCRIPT DEVELOPER TOOLS
---------------------

Q: How do you open developer tools?
A: By inspecting the page or pressing (cmd + option + c)

Q: How do you change screen size of a website using developer tools?
A: By selecting Toggle device toolbar and choosing responsive and entering the values for height and width 

Q: What is a breakpoint?
A: Breakpoint is a feature within the devtool which allows you to pause your javascript to facilitate debugging 

Q: How do you set a breakpoint?
A: It can be set by adding "debugger;" into your code or by utilising the source tab from the dev tool and selecting the script file on the left - then click the line number you wish to set breakpoint.

---------------------
FUNDAMENTALS PART 3
---------------------

Q: What are functions useful for?
A: They are useful for storing a piece of coe which does a single task and can be recalled with a single short command.

Q: How do you invoke a function?
A: You can invoke functions by writing the their name followed by parentheses.

Q: What are anonymous functions?
A: They are functions without a name being declared

Q: What is function scope?
A: That is the code block within the function, the scope outside of the function is called the global scope

Q: What are return values?
A: They are values which are the result from the function

Q: What are arrow functions?
A: They are similar to normal functions but mainly used for one liner functions

---------------------
PROBLEM SOLVING
---------------------

Q: What are the three stages in the problem solving process?
A: Plan, Pseudocode and Divide and conquer

Q: Why is it important to clearly understand the problem first?
A: This way you solve the correct problem whereas if you don't fully understand the solution may be not relevant for the problem 

Q: What can you do to help get a clearer understanding of the problem?
A: When down what the program is supposed to do and answer some questions to better understand the problem

Q: What are some of the things you should do in the planning stage of the problem solving process?
A: Ask questions which allow you to better understand whats required and write the algorithm in plain english

Q: What is an algorithm?
A: An algorithm are a set of steps taken/executed which lead to a result/solution - recipe to a solution

Q: What is pseudocode?
A: Pseudocode is writing out the logic for the program in plain language (english) - It helps you understand what you will need to solve 

Q: What are the advantages of breaking a problem down and solving the smaller problems?
A: It is less over whelming and easier to solve, It also works well with the function approach (each function should do a single task)

---------------------
UNDERSTANDING ERRORS
---------------------

Q: What are three reasons why you may see a TypeError?
A: Argument passed to a function is incompatible with the  type expected by that operator, attempting to modify a value that cannot be changed or attempting to use a value in an inappropriate way. 

Q: What is the key difference between an error and a warning?
A: Error can stop your code from executing whereas warnings are more informational/ potential problems.

Q: What is one method you can use to resolve an error?
A: Use console.log facilitate the debugging process

---------------------
CLEAN CODE
---------------------

Q: Why is it important to write clean code?
A: It makes it easier to maintain/update/read the code by the developer at a later date or their colleagues

Q: Name 5 clean code principles previously mentioned
A 1: Use comments to explain 'why' the code does what it does,
  2: Properly format structure to allow the ease of reading and updating,
  3: Avoid extremely large functions because it can get confusing and its better practice to break it up into smaller functions
  4: Write down the logic before coding as it helps to better understand the program and whats required
  5: Use naming standards for functions and variables as it makes it clear what they do or being used for which inturn makes your code manageable 


Q: What is the difference between good comments and bad comments?
A: Good comments explain the code and assist during moments of doubt and bad comments repeat what the code does or portray information that does not assist with understanding the code

---------------------
FUNDAMENTALS PART 4
---------------------

Q: What is an array?
A: An array is a special variable which can hold more then one value at once.

Q: What are arrays useful for?
A: They are useful for hold different type of values as a form of list under a single variable name

Q: How do you access an array element?
A: By referring to their index number "variableName[index]"

Q: How do you change an array element?
A: By referring the variable with the position index and using the "= " followed by the value you want to change into

Q: What are some useful array properties?
A: length, construct and prototype

Q: What are some useful array methods?
A: push, shift, pop and unshift.

Q: What are loops useful for?
A: Loops are useful for repeating a process multiple times very quickly

Q: What is the break statement?
A: Break statements stops the loop/ switch currently is progress before reaching the end 

Q: What is the continue statement?
A: The continue statement allows you to skip to the next iteration of the loop

Q: What is the advantage of writing automated tests?
A: It allows you to test your code and make sure it works under various conditions

---------------------
DOM MANIPULATION AND EVENTS
---------------------

Q: What is the DOM?
A: The DOM is the document object model, its the HTML structure

Q: How do you target the nodes you want to work with?
A: By using their selectors such as type, class, id or position

Q: How do you create an element in the DOM?
A: By using the javascript createelement function

Q: How do you add an element to the DOM?
A: By adding it to my html file manually or by using the javascript append method

Q: How do you remove an element from the DOM?
A: By using the javascript remove method 

Q: How can you alter an element in the DOM?
A: You can alter an element in the DOM by using its reference

Q: When adding text to a DOM element, should you use textContent or innerHTML? Why?
A: Use textContent as innerHTML will override existing html and text instead of just the text
A: By using innerHTML it could possibly open you code/program to attacks/hackers

Q: Where should you include your JavaScript tag in your HTML file when working with DOM nodes?
A: Before for closing body tag as that allows the html elements to parse or within the head tag with the "defer" attribute added for it to wait until the html elements  have parsed.

Q: How do “events” and “listeners” work?
A: Eventlistner wait for an event(click, hover or keydown) to happen before triggering and executing a code

Q: What are three ways to use events in your code?
A: Eventlistner can be added using inline onclick attribute, external onclick function or by adding the Eventlistner function.

Q: Why are event listeners the preferred way to handle events?
A: Its clearner way to code and it also allows you to add multiple events which makes it more flexible and powerful

Q: What are the benefits of using named functions in your listeners?
A: It keeps your code clean and make it easier if the function is needed in multiple sections/elements

Q: How do you attach listeners to groups of nodes?
A: To add listners to multiple elements you would need to iterate through each element and add by using (forEach) function

Q: What is the difference between the return values of querySelector and querySelectorAll?
A: querySelector returns the first element that matches the selector whereas the querySelectorAll returns a nodelist of all the elements that match the selector

Q: What does a “nodelist” contain?
A: It contains a list of elements and within each element attributes which can be utilized 

Q: Explain the difference between “capture” and “bubbling”.
A: Capturing is the event traveling inwards e.g body > parent > clicked element into the element clicked and bubble is when the event travels outward e.g clicked element > parent > body

---------------------
FUNDAMENTALS PART 5
---------------------

Q: What is the difference between objects and arrays?
A: Objects can store key:values, while keys must be string the values can be anything.

Q: How do you access object properties?
A: You can use bracket annotation "obj['key']" or "obj.key"

Q: What is Array.prototype.map() useful for?
A: It is useful for creating new array variable from existing array;

Q: What is Array.prototype.reduce() useful for?
A: Its useful to add up/ join array values and return the total from an array

---------------------
INTRODUCTION TO THE BACK END
---------------------

Q: What is back-end development?
A: Backend is the part of web development the user doesn't see, it runs on a server separate from the users machine.

Q: How many parts does the backend consist of?
A: It consists of 3 parts - the server, application and database

Q: Name each part of the backend.
A: The server, application and database

Q: Where does the backend store its data?
A: It stores it on a database

---------------------
INTRODUCTION TO FRAMEWORKS
---------------------

Q: What problems do frameworks solve?
A: Framework solves the problem of developers re-writing the same code and standardized formatting which allows others to better understand what your code does
A: Simplify common web development operations.

Q: Name some popular front-end and back-end frameworks.
A: React, Vue, Angular, Ruby on Rails and NodeJS 

Q: Describe the process of choosing a framework.
A: How much effort is it to learn, how quickly to implement new features, performance of the frame work, Caching support, Scalability and web security
A: https://developer.mozilla.org/en-US/docs/Learn/Server-side/First_steps/Web_frameworks#how_to_select_a_web_framework

---------------------
EMMET
---------------------

Q: Why should you use Emmet?
A: Its useful for when writing HTML or CSS, it speeds up writing the code 

Q: What are some useful Emmet abbreviations?
A: ! - html boilerplate, .class, #id, 

Q: What syntax would you use to create this element <p class="text"></p>?
A: p.text

Q: What syntax expands to an element with a child element inside of it? For example: <div><p></p></div>
A: >

Q: What syntax would you use to create three elements that have the same class name?
A: *3

---------------------
FORM BASICS
---------------------

Q: Explain what the form element is for and what two attributes it should always include.
A: The form element is to get or send data from the user, it can also be used to update UX/UI of the page - it should always include "action" and "method" attributes.

Q: Explain what form controls are at a high level.
A: labels and input - They allow the user to insert/select data input and also label the input correctly to let the user know what type of data is needed.

Q: What is the name attribute for?
A: The name attribute is used as an object key for the value selected/entered when sent to the backend.

Q: What are the three most common form controls you can use for allowing users to select predefined options?
A: checkbox, radio and dropdown

Q: What are the three types of buttons in HTML?
A: submit, button and reset

Q: What are the two most challenging aspects of styling forms?
A: checkboxes and radios

---------------------
FORM VALIDATION
---------------------

Q: What does the required validation do?
A: It stops the user from proceeding if the input value is invalid - it also shows a pop up highlighting the section.  

Q: What validations can you use for checking text length?
A: maxLength and minLength

Q: How can you validate the minimum and maximum of numeric inputs?
A: by using the "min" and "max" validation attributes

Q: What can you use the pattern validation for?
A: It can be used to check if email domain exists within the entered value

Q: What pseudo css selectors are available for styling valid and invalid inputs?
A: ":valid" is used for valid values and ":invalid" is used for invalid values

---------------------
FORM VALIDATION
---------------------

Q: What is the xmlns attribute?
A: Extensible Markup Language NameSpace - This specifies what dialect of XML you’re using–in our case, that dialect is the SVG language spec. Without it, some browsers will not render your image or will render it incorrectly.

Q: What are some situations where you wouldn’t want to use SVG?
A: If the image contains a lot of detail and textures e.g photos

Q: What are the benefits of “inlining” your SVGs? What are the drawbacks?
A: It always you to target it and make amendments using css and javascript by targeting its attributes, the drawbacks are that it makes your code less readable, makes page less cacheable and if its a large SVG it might delay the rest of your HTML from loading

---------------------
TABLES
---------------------

Q: What is a table?
A: Is structure made up of multiple html elements (table,thead,tbody,tfoot,tr,td and more) to contain data/information in a table format

Q: Why is it a bad idea to use HTML Tables for page layout?
A: It affects the page accessibility for visually impaired users, tables involve more complex markup which makes your code hard to read and tables are not automatically responsive.

Q: What are caption elements useful for?
A: It is used to add details about the table content - gives readers idea what the table is about

Q: What is the scope attribute?
A: It is used to tell screenreaders exactly what cells the header is header for

---------------------
DEFAULT STYLES
---------------------
Q: Why would you want to use a CSS reset?
A: To remove the pre-existing styling from the browser, this way the developer is starting with a blank canvas without inconsistencies on various browsers.

---------------------
CSS UNITS
---------------------

Q: Why would you want to use em or rem for font-size instead of px?
A: To make the text scale responsively based on the root element or parent elements size.

Q: What are some instances where you might want to use vh and vw?
A: If I wanted to the page to take up the full height/ width, have the font-size respond to viewport width/ height

Q: What are some instances where you might want to use px instead of a relative unit?
A: When I want the font-size, padding, margin, width or height to remain the same regardless of viewport size or root/parent element font size.

---------------------
MORE TEXT STYLES
---------------------

Q: What are the 2 ways to add fonts that are not installed on a user’s computer?
A: By using @import within the css file or by placing the appropriate tags within the page header which pulls the font into your page. 

Q: What is the ‘system font stack’ and why would you want to use it?
A: font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
A: Because they are system fonts they are more reliable as fallback fonts incase the imported fonts doesn't load or the browser doesn't support the font format.

Q: Which property would you use to increase or decrease the space between letters in a word?
A: "letter-spacing" is what is used to increase or decrease spacing between letters

Q: Which property would you use to increase or decrease the space between lines in a paragraph?
A: "line-height" is what is used to increase or decrease space between lines in a paragraph

---------------------
MORE CSS PROPERTIES
---------------------

Q: Which property would you use to make an element transparent?
A: "Opacity"

Q: Which property would you use to make a background image tile?
A: "background-repeat"

Q: Which property would you use to add scrollbars to an element?
A: "overflow"

Q: Which property would you use to add a shadow behind an element?
A: "box-shadow"

Q: Which property would you use to create rounded corners on an element?
A: "border-radius"

Q: How would you use border-radius to make a circular element?
A: By assigning the value of 50% to it. 

---------------------
ADVANCED SELECTORS
---------------------

Q: What is the difference between the child combinator and the descendant combinator?
A: child combinator targets the direct children 1 level into the parent element and descendant combinator targets all children or grandchildren which fit the selector.

Q: How does the syntax of pseudo-classes and pseudo-elements differ?
A: pseudo classes contains single colon ":" whereas pseudo element selector contains double "::"

Q: Do pseudo-classes exist somewhere in HTML? Do pseudo-elements?
A: pseudo-classes do exists somewhere within the HTML e.g hover, clicked or active - pseudo-elements do not and must be implemented through css

Q: Name two ways you could select every second child of an element, starting with the first.
A: "first + second" or "first ~ .second-child-class"

Q: What is the difference between div:first-child and div:last-child? What will each select?
A: div:first-child - selects all div elements which are first child within their parent and div:last-child targets div which are the last child

Q: What selector would you use to style a button a user is currently hovering over? How about one that is currently being clicked on?
A: button:hover and button:active

Q: How could you select all input elements with a type of text?
A: input[type=text]

Q: How could you select all classes that begin with thunder?
A: [class^="thunder"]

---------------------
POSITIONING
---------------------

Q: What is the difference between static and relative positioning?
A: relative can be moved around the viewport by using left, right, top and bottom whereas static cannot 

Q: What is absolute positioning useful for?
A: It is useful for positioning elements within a specific section of te page without disturbing other elements  

Q: What is the difference between fixed and sticky positioning?
A: Fixed allows you to position elements at a particular point in the viewport and it remains as you scroll and sticky behaves similar to relative and becomes fixed once it reach's the viewport edges.

---------------------
CSS FUNCTIONS
---------------------

Q: What are the four CSS math functions we covered above?
A: calc(), max(), min() and clamp()

Q: How do we use CSS math functions in our CSS?
A: property : function(Argument,Argument), functions can be used to set color and change element sizes

Q: How can CSS functions help make websites and applications more responsive?
A: It can have elements resize accordingly based on the available space which helps with layouts and sizing.

---------------------
CUSTOM PROPERTIES
---------------------

Q: How would you declare a custom property with a name of text-color?
A: --text-color: #00;

Q: How would you access a custom property with a name of background-color?
A:  var(--background-color)

Q: Where would you declare a custom property to have its scope be global and accessible by all other selectors?
A: :root { --target-all: #000; } - target the root which encompasses all other elements

Q: Where would you declare a custom property so that a user’s theme setting from their OS or browser was taken into account?
A: @media (prefers-color-theme: dark){} - set it via @media within the stylesheets 

---------------------
BROWSER COMPATIBILITY
---------------------

Q: What is the most used browser currently?
A: Google Chrome / Chromium 

Q: What was the original name of the first web browser?
A: CERN / Nexus

Q: How are mobile browsers different on Apple mobile operating systems from Android?
A: All browsers on Apple mobile use the safari rendering engine regardless of its name - its more of a different coat of paint but the same under the hood.

---------------------
Frameworks and Preprocessors
---------------------

Q: What are some advantages of using a CSS framework?
A: Saves time because it speeds up building process, 
A: pre-existing documentation for the team, 
A: consistent way of coding and it has been QA'd for faults which you would otherwise have to do,
A: Online community for support.

Q: What are some disadvantages of using a CSS framework?
A: Websites begin to look the same,
A: Hard to remove from project if you decide to change your mind,
A: Fixing issues you may not need fixing,
A: Stops new developers from learning CSS fundamentals which is needed to debug frameworks.

Q: What are some advantages of using a CSS preprocessor?
A: Easier to maintain,
A: It makes your code more organized,
A: It makes your code DRY (Don't repeat your self).

Q: What are some disadvantages of using a CSS preprocessor?
A: Produce very large CSS files,
A: Debugging is harder,
A: CSS preprocessors require extra tooling. Code authors shouldn’t be forced to use a particular editor just to be able to use the tool.Also, extra stuff adds complexity.

---------------------
INTRODUCTION TO GRID
---------------------

Q: How can you use Flex to make a two-dimensional layout?
A: By using the flex-wrap attribute which allows you to wrap your flex items to the next line.

Q: Why was CSS Grid introduced?
A: To facilitate building layouts for developers instead of using hacky methods such as float

Q: Which CSS layout module would you use to easily make equal sized items in a container?
A: Grid would make it easier as it allows you to have more control over the elements

---------------------
CREATING A GRID
---------------------

Q: How does an HTML element become a grid item?
A: By setting the parent element display to "grid" or "inline-grid"

Q: What is the space between lines on the grid?
A: It is called "grid track"

Q: How do you set gutters (also known as alleys) in the grid?
A: by using the "row-gap", "column-gap" or "gap" attributes on the parent element

Q: Describe what happens when you have more content than defined tracks.
A: It wraps the content onto the next line

Q: How could you change the size for those undefined tracks?
A: By Setting the "grid-auto-rows" or "grid-auto-columns" on the parent element

---------------------
POSITIONING GRID ELEMENTS
---------------------

Q: Explain the difference between a track and a line.
A: line are the spaces between the grids and tracks is the direct the grid is going horizontally (row) / vertically (column) 
A: Lines is what we use to position grids and you can think of a grid track as any single row or column on a grid.

Q: What is the smallest unit on a grid?
A: Cells are the smallest unit of measurement in a grid.

Q: What kind of value do we give to the grid-column-start or grid-column-end properties?
A: We give the grid column line number to start and end.

Q: Which property can we use to combine all the start and end values for a grid item?
A: "grid-area"

Q: Which grid container property can map out a visual structure of grid items?
A: "grid-template-areas"

---------------------
ADVANCED GRID PROPERTIES
---------------------

Q: How do you create several grid tracks of the same size without manually typing each one out?
A: by using the repeat() function

Q: What is the difference between a static and dynamic size value?
A: static remain the same whilst dynamic resize dynamically depending on the space/width available

Q: How can you assign a grid track a flexible value that changes depending on the remaining space available in the grid?
A: by using the fr (fractional units)

Q: How can you assign grid tracks an uneven distribution of the remaining space in a grid?
A: by assigning a high fr to the remaining column (1fr 1fr 2fr)

Q: Which CSS functions will return the smallest or largest value supplied to them?
A: min() or max() is used to return the smallest or largest

Q: Which CSS Grid-only function allows you to supply a minimum and maximum track size that is calculated in realtime?
A: minmax() is the function  used to return minimum and maximum 

Q: Which global CSS function allows you to supply a minimum, ideal, and maximum value that is calculated in realtime?
A: clamp() is the function used to supply the in, ideal and maximum 

Q: What attribute of repeat() can be used to fill in as many grid tracks as possible, given certain constraints?
A: "auto-fill" is the attribute used to fill in as many grid tracks as possible 

Q: What is the difference between auto-fit and auto-fill?
A: auto-fit will keep the grid items at their max size and auto-fill the the grid items will snap back down to their min size once the space becomes available.

---------------------
ADVANCED GRID PROPERTIES
---------------------

Q: When might you use Flexbox over Grid?
A: When coding a content first design or coding a module which would require the content position to change (easier with to move content with flexbox)

Q: When might you use Grid over Flexbox?
A: When coding page layout or creating a dynamic grid

Q: When might you use the two of these tools together?
A: When centering a grid parent using flexbox and the grid parent containing grid items.

---------------------
OBJECTS AND OBJECT CONSTRUCTORS
---------------------

Q: Write an object constructor and instantiate the object.
A: function player(name, age) {
    this.name = name
    this.age = age
    this.sayIt = function () {
        return 'Hi I\'m ' + this.name + ' I am ' + age + ' years old.'
    }
}

const scott = new player('scott', 67);

Q: Describe what a prototype is and how it can be used.
A: Prototype is an object which has been inherited from an pre-existing object, it can be used to pass functions and methods to new objects

Q: Explain prototypal inheritance.
A: Prototypal inheritance is a language feature which helps create new slightly modified variations of an object which can also inherit it's methods and functions. 

Q: Understand the basic do’s and don’t’s of prototypical inheritance.
A: Don't - EighthGrader.prototype = Student.prototype - because it will literally set EighthGrader’s prototype to Student.prototype (i.e. not a copy);
A: Do - EighthGrader.prototype = Object.create(Student.prototype) - After creating the constructor for EighthGrader, we set its prototype to a new object that has a copy of Student.prototype.

Q: Explain what Object.create does
A: It creates a new object using an existing object as the prototype of the newly created object.

---------------------
FACTORY FUNCTIONS AND THE MODULE PATTERN
---------------------

Q: Describe common bugs you might run into using constructors.
A: Forgeting the word "new" and polluting the namespace (global scope)
A: Changing the prototype breaks the instanceof 

E.G
// Constructor
function C() {}
 
// Create object.
var c = new C();
c instanceof C;
=> true
c.constructor === C;
=> true
 
// Change prototype
C.prototype = { prototype_prop : "proto"};
c.constructor === C;
=> true
c instanceof C;  // instanceof no longer works!
=> false

Q: Write a factory method that returns an object.
A:  const factoryReturnObj = (firstname, lastname) => {
      shoutHi = () => console.log('HELLOOOO!!! ' + firstname + ' ' + lastname);
      return {firstname, lastname, shoutHi}
    }

let robert = factoryReturnObj('robert', 'wilson');

robert.shoutHi();

Q: Explain how scope works in JavaScript (bonus points if you can point out what ES6 changed!).
A: Scope / Global Scope (namespace) defines the level of access you have (any variables/objects/functions defined in its parent scope, are available in the scope chain)
A: ES6 introduced both const and let which are block scope variables (they will be scoped to the closest set of curly brackets);
  var age = 100;
  if(age > 12) {
    let dogYears = age * 7;
    console.log(`You are ${dogYears} dog years old!`);
  }
  console.log(dogYears); // error because it's scoped only to the above block

Q: Explain what Closure is and how it impacts private functions & variables.
A: Closure makes the code inside the function inaccessible to the public scope, calling the function alone will do nothing, the function will need to be assigned and then called.
A: _private functions and variables will be inaccessible unless they are returned by the parent closure function.

Q: Describe how private functions & variables are useful.
A: They are useful if their sole purpose is to assists the main function they are within, this way its not polluting the namespace (global scope)

Q: Use inheritance in objects using the factory pattern.
A: 
  const shoutHello = (firstname) => {
      shoutHi = () => console.log('HELLOOOO!!! ' + firstname);
      return { shoutHi }
  }

  const sayName = (firstname) => {
      const { shoutHi } = shoutHello(firstname);
      const quietName = () => { console.log('I am ' + firstname) }
      return { shoutHi, quietName }
  }

  let robert = sayName('Robby');

  robert.quietName();

Q: Explain the module pattern.
A: The module pattern is similar to factory function but instead of creating multiple objects it is wrapped in a IIFE, it also wrapped within an anonymous closures which only give access to objects that have been returned.

Q: Describe IIFE. What does it stand for?
A: IIFF stands for Immediately invoked function expression  - It means by wrapping a function in parentheses (function)() which will trigger the function Immediately.  

Q: Briefly explain namespacing and how it’s useful.
A: namespacing is a technique that is used to avoid naming collisions e.g by encapsulating the inner workings of our program into objects.

---------------------
FACTORY FUNCTIONS AND THE MODULE PATTERN
---------------------

Q: Describe the pros and cons of using classes in JavaScript.
A: Making class more user friendly will assist developers as class is something everyone learns.
A: Concept of classes makes things brittle. Prototypes are better and very flexible.

Q: Briefly discuss how JavaScript’s object creation differs from a language like Java or Ruby.
A: Within Java or Ruby objects need a blueprint to exist which is called "class" and within javascript objects can be created without a it.

Q: Explain the differences between using a class to define a constructor and other prototype methods.
A: An important difference between function declarations and class declarations is that while functions can be called in code that appears before they are defined, classes must be defined before they can be constructed.

Q: Explain what “getters” & “setters” are.
A: They are methods used to get or set the property values;
A: get” is the keyword utilized to define a getter method for retrieving the property value, whereas “set” defines a setter method for changing the value of a specific property.

Q: Understand what computed names and class fields are.
A: computed names allows you to dynamically compute names of the object properties in JavaScript object literal notation and class function.
A: Class field is another way to define properties within a class function without it being inside a constructor.

Q: Describe function binding.
A: Function binding is being able to utilize the "this" keyword separate from its object - able to use the same value referenced in one object within another.

Q: Be able to use inheritance with classes.
A: inheritance can be used with classes by utilizing the "extend & super" keywords -  The super keyword is used to call corresponding methods of super class. This is one advantage over prototype-based inheritance.

Q: Briefly talk about the conflict in JS with functional programming and classes.
A: Currently the dispute between functional and classes is that some JS developer believe that the class function is not needed as you can use function programming to achieve a similar affect to class - they also believe that class is syntax sugar to make it easier to read.
 
---------------------
ES6 MODULES
---------------------

Q: Explain what npm is and where it was commonly used before being adopted on the frontend.
A: NPM stand for Node Package Manager it is a software registry, it was used originally a package manager made specifically for node.js, a javascript runtime designed to run on the server.
A: npm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently. It is extremely configurable to support a wide variety of use cases. Most commonly, it is used to publish, discover, install, and develop node programs.

Q: Describe what npm init does and what package.json is.
A: It initiates npm and prompts you with several questions and generate a new file named "package.json" - this is a configuration file that npm uses to save all project information.

Q: Know how to install packages using npm.
A: By using the CLI and typing "npm ini" within the folder containing "index.html" and then typing "npm install <package> --save"

Q: Describe what a JavaScript module bundler like webpack is.
A: A JavaScript module bundler is a tool that gets around the problem with a build step (which has access to the file system) to create a final output that is browser compatible (which doesn’t need access to the file system).

Q: Explain what the concepts “entry” and “output” mean as relates to webpack.
A: The entry is where webpack imports the files by their name and the output is the compiled code from the entry point.
A: The entry object is where webpack looks to start building the bundle. The context is an absolute string to the directory that contains the entry files.
A: The output in Webpack is an object holding the path where our bundles and assets will go, as well as the name the entries will adopt.

Q: Briefly explain what a development dependency is.
A: It means files you need in order for your code to run properly without bugs or issues
A: Development dependencies, or devDependencies are packages that are consumed by requiring them in files or run as binaries, during the development phase. These are packages that are only necessary during development and not necessary for the production build

Q: Explain what “transpiling code” means and how it relates to frontend development.
A: Transpiling code means converting the code in one language to code in another similar language. This is an important part of frontend development — since browsers are slow to add new features, new languages were created with experimental features that transpile to browser compatible languages.

Q: Briefly describe what a task runner is and how it’s used in frontend development.
A: Is a tool that automates different parts of the build process. For frontend development, tasks include minifying code, optimizing images, running tests, etc.

Q: Describe how to write an npm automation script.
A: By writing commands scripts within the package.json object
A: https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html#using-a-task-runner-(npm-scripts)

Q: Explain one of the main benefits of writing code in modules.
A: There are many benefits to writing your code in modules. One of the most compelling is code reuse. If, for instance, you have written some functions that manipulate the DOM in a specific way, putting all of those into their own file as a ‘module’ means that you can copy that file and re-use it very easily!

Q: Explain “named exports” and “default exports”.
A: named exports is used for exporting multiple functions and default is for single function.
A: Named exports allow us to share multiple objects, functions or variables from a single file and were introduced with the release of ES2015. Named exports are imported with curly braces in various files and must be imported using the name of the object, function or variable that was exported.

---------------------
WEBPACK
---------------------

Q: How do you load CSS using webpack?
A: https://webpack.js.org/guides/asset-management/#loading-css
  1: run "npm install --save-dev style-loader css-loader" in the CLI
  2: Add rules so webpack can determine which files to target
      test: /\.css$/i,
      use: ['style-loader', 'css-loader'],
  3: Add style.css file into the src directory
  4: add "import './style.css';" into the index.js file
  5: run "npm run build" and view your index.html file on the browser to see the changes. 

Q: How do you load images using webpack?
A: https://webpack.js.org/guides/asset-management/#loading-images
  1: Add rules so webpack can determine which files to target
      test: /\.(png|svg|jpg|jpeg|gif)$/i,
      type: 'asset/resource',
  3: Add image file into the src directory
  4: add "import 'import Icon from './icon.png';" into the index.js file
  5: run "npm run build" and view your index.html file on the browser to see the changes. 

Q: How do you load fonts using webpack?
A: https://webpack.js.org/guides/asset-management/#loading-fonts
  1: Add rules so webpack can determine which files to target
      test: /\.(woff|woff2|eot|ttf|otf)$/i,
      type: 'asset/resource',
  3: Add font file into the src directory
  4: Import font into css by adding the "@font-face" function with the font values
  5: run "npm run build" and view your index.html file on the browser to see the changes. 

Q: How do you load data using webpack?
A: https://webpack.js.org/guides/asset-management/#loading-data
  1: run "npm install --save-dev csv-loader xml-loader" in the CLI
  2: Add rules so webpack can determine which files to target
    {
      test: /\.(csv|tsv)$/i,
      use: ['csv-loader'],
    },
    {
      test: /\.xml$/i,
      use: ['xml-loader'],
    },
  3: Add data xml/cvs/other file into the src directory
  4: add import script with the correlating data file format 
      import Data from './data.xml';
      import Notes from './data.csv';
  5: run "npm run build" and view your index.html file on the browser to see the changes. 

Q: How would you track errors in bundled source code?
A: https://webpack.js.org/guides/development/#using-source-maps
    1: By using source maps (inline-source-map) within the webpack config file (devtool: 'inline-source-map',)
    2: run "npm run build" and view your index.html file on the browser to see the changes.
    error e,g: Uncaught ReferenceError: cosnole is not defined at HTMLButtonElement.printMe (print.js:2)

---------------------
OOP PRINCIPLES
---------------------

Information holder – an object designed to know certain information and provide that information to other objects.
Structurer – an object that maintains relationships between objects and information about those relationships.
Service provider – an object that performs specific work and offers services to others on demand.
Controller – an object designed to make decisions and control a complex task.
Coordinator – an object that doesn’t make many decisions but, in a rote or mechanical way, delegates work to other objects.
Interfacer – an object that transforms information or requests between distinct parts of a system.

Q: Explain the “Single Responsibility Principle”.
A: Single Responsibility Principle is means the class,module or object should have one main responsibility - e.g The application logic should not also contain function which render DOM elements.

Q: Briefly explain the additional SOLID principles.
A: 
    Single responsibility principle: A class should have one and only one reason to change, meaning that a class should only have one job.
    Open-closed Principle: Objects or entities should be open for extension, but closed for modification.
    Liskov substitution principle: Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.
    Interface segregation principle: A client should never be forced to implement an interface that it doesn’t use or clients shouldn’t be forced to depend on methods they do not use.
    Dependency inversion principle: Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions.

Q: Explain what “tightly coupled” objects are and why we want to avoid them.
A: 
  Tight coupled is when a module knows about another module and relies on it and we want to avoid this to make the module more reusable and interchangeable.
  There are many reasons to avoid tightly coupling your modules. We discussed some of these in the first chapter of this series. Recall that one of the goals when creating highly scalable and maintainable JavaScript applications is that any module can be easily swapped out at any time for a different module. Reusability is also a major reason to minimize coupling. Ideally, we would like to maximize code reuse and the ability to test modules independently.

---------------------
LINTING
---------------------

Q: What is linting?
A: It is running a tool which checks your code for errors/ mistakes

Q: Which problems can linting prevent?
A: prevents bugs, saves time, makes your code better, potential XSS security holes and readability problems.

Q: Why should you use Prettier?
A: Make my code much more readable and also re-format my code to adhere with company guidelines.

---------------------
DYNAMIC USER INTERFACE INTERACTIONS
---------------------

Q: What are some different types of navigation menus?
A: https://uxplanet.org/top-8-mobile-navigation-menu-design-for-your-inspiration-8a2d925bffc0
  1). Tabber — Classic navigation menu
  2). Rectangular, grid navigation menu
  3). Drawer navigation
  4). Rudder navigation

Q: What are the alternatives to hamburger menus?
A: 
  1. Tabs
  2. Tabs with a ‘more’ option
  3. Progressively collapsing menu
  4. Scrollable navigation
  5. Dropdown menus

Q: What are the downsides of hamburger menus?
A: hurts UX metrics due of its low discoverability and efficiency
  https://medium.com/@kollinz/misused-mobile-ux-patterns-84d2b6930570#6d1e
  https://www.nngroup.com/articles/hamburger-menus/
  https://lmjabreu.com/post/why-and-how-to-avoid-hamburger-menus/
  https://www.lukew.com/ff/entry.asp?1945
  https://jamesarcher.me/hamburger-menu