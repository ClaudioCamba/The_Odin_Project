---------------------
Basic Operators
---------------------
Addition +,
Subtraction -,
Multiplication *,
Division /,
Remainder %,
Exponentiation **.

++[var] : increment
[var]-- : decrement

+[string number] : converts into number

---------------------
Data Types
---------------------
- Number : The number type represents both integer and floating point numbers.
- BigInt : In JavaScript, the “number” type cannot represent integer values larger than (253-1) (that’s 9007199254740991), or less than -(253-1) for negatives. It’s a technical limitation caused by their internal representation.
- String : A string in JavaScript must be surrounded by quotes - Double quotes: "Hello". | Single quotes: 'Hello'. | Backticks: `Hello`.
- Booleon : The boolean type has only two values: true and false.
- Null : The special null value does not belong to any of the types described above. It forms a separate type of its own which contains only the null value:
- Undefined : The special value undefined also stands apart. It makes a type of its own, just like null. The meaning of undefined is “value is not assigned”.
- Objects & Symbols : All other types are called “primitive” because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.
- Objects & Symbols : The symbol type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.
- typeof : The typeof operator returns the type of the argument. It’s useful when we want to process values of different types differently or just want to do a quick check. A call to typeof x returns a string with the type name:

---------------------
String
---------------------
- A template literal looks just like a normal string, but instead of using single or double quote marks (' or "), you use backtick characters (`):
- ${template} : Template literals respect the line breaks in the source code, so you can write strings that span multiple lines
e.g below -
const name = 'Chris';
const greeting = `Hello, ${name}`;
console.log(greeting); // "Hello, Chris"

---------------------
Methods / Functions
---------------------
- Methods : Vocabulary time: a method is a bit of functionality that is built into the language or into specific data types
- prompt()
- alert() 
- console.log()
- new date().getDay()
---------------------
= Use values within the same object by using methods
const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
};
---------------------
- Note: Parameters are sometimes called arguments, properties, or even attributes.

- Supporting optional parameters

function hello(name='Chris') {
  console.log(`Hello ${name}!`);
}

hello('Ari'); // Hello Ari!
hello();      // Hello Chris!

---------------------
Function naming:

A name should clearly describe what the function does. When we see a function call in the code, a good name instantly gives us an understanding what it does and returns.
A function is an action, so function names are usually verbal.
There exist many well-known function prefixes like create…, show…, get…, check… and so on. Use them to hint what a function does.

---------------------
Function Declaration: a function, declared as a separate statement, in the main code flow.
function sayHi() {
  alert( "Hello" );
}
---------------------
Function Expression: a function, created inside an expression or inside another syntax construct. Here, the function is created at the right side of the “assignment expression” =:
let sayHi = function() {
  alert( "Hello" );
};

---------------------
Arrow functions, the basics
let sum = (a, b) => a + b;

- If we have only one argument, then parentheses around parameters can be omitted, making that even shorter.
let double = n => n * 2;

- If there are no arguments, parentheses will be empty (but they should be present):
let sayHi = () => alert("Hello!");

sayHi();

- Arrow functions can be used in the same way as Function Expressions. For instance, to dynamically create a function:
let age = prompt("What is your age?", 18);

let welcome = (age < 18) ?
  () => alert('Hello') :
  () => alert("Greetings!");

welcome();

- Without curly braces: (...args) => expression – the right side is an expression: the function evaluates it and returns the result.
- With curly braces: (...args) => { body } – brackets allow us to write multiple statements inside the function, but we need an explicit return to return something.

---------------------
Statements
---------------------
- switch
e.g 
switch (new Date().getDay()) {
  case 0:
    day = "Sunday";
    break;
  case 1:
    day = "Monday";
    break;
  case 2:
     day = "Tuesday";
    break;
  case 3:
    day = "Wednesday";
    break;
  case 4:
    day = "Thursday";
    break;
  case 5:
    day = "Friday";
    break;
  case 6:
    day = "Saturday";
}

Ternary operator - ( condition ) ? run this code if true : run this code instead if false

---------------------
Debugger
---------------------
debugger; - insert into code to add breakpoints which assist when debugging 


---------------------
Errors
---------------------
- Uncaught ReferenceError: c is not defined : The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.
e.g 
const a = "Hello"
const b = "World"

console.log(c)

---------------------
- Uncaught SyntaxError: Unexpected string : The ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.
e.g
function helloWorld() {
  console.log "Hello World!"
}

---------------------
- an operand or argument passed to a function is incompatible with the type expected by that operator or function;
- or when attempting to modify a value that cannot be changed;
- or when attempting to use a value in an inappropriate way.

const str1 = "Hello";
const str2 = "World!";
const message = str1.push(str2);

---------------------
Syntax errors: These are spelling errors in your code that actually cause the program not to run at all, or stop working part way through — you will usually be provided with some error messages too. These are usually okay to fix, as long as you are familiar with the right tools and know what the error messages mean!
Logic errors: These are errors where the syntax is actually correct but the code is not what you intended it to be, meaning that program runs successfully but gives incorrect results. These are often harder to fix than syntax errors, as there usually isn't an error message to direct you to the source of the error.

---------------------
Clean Code
---------------------
Rules of thumb

  1. Indentation: It doesn’t really matter what style of indentation you use.
  2. Semicolons: This functionality CAN break in certain situations leading to bugs in your code so it is better to get used to adding semi-colons. Just do it!
  3. Line length: This rule is not quite as strict as some of the others, but as a general rule, your code will be easier to read if you manually break lines that are longer than about 80 characters.
  4. Naming Things: Names for functions and variables should be descriptive. Always use camelCase. To keep things consistent and easy to read, variables should always begin with a noun or an adjective (that is, a noun phrase) and functions with a verb.

---------------------
10 Principles for Keeping Your Programming Code Clean

1) Revise Your Logic Before Coding
  Before blindly typing into the debugger of choice, some flow diagrams or written pseudo-code might come in handy to previously verify the logic behind those lines of code. Writing it down first can clarify many doubts or insecurities about complex functionality, and therefore save a lot of time. But most importantly, helping you get it right faster will also help you avoid all the messy code replacements and additions that tamper with the following principles.

2) Clearly Expose the Structure of the Page
  Working with main containers is useful, but working with main containers with a representative ID is even more useful. The structure appears evident, thanks to the DIV containers that are concretely named after their destined content. Not only will it be simpler to start adding code, but it’ll also be perfectly transparent for someone who tries to add or remove something afterward. This structuring method, however, should be aided by the next statement.

3) Use the Correct Indentation
  Supporting the previous pronouncement on structure, indentation distinctly displays the opening and closing points of each element used. If every line of code is glued to the left side of the screen, it’ll be very hard to distinguish the exact place where an element is closed. Therefore, it’ll mess up the effort made at designing a complete structure, since it won’t be noticeable afterward

4) Write Explanatory Comments
  Underestimating the value of good comments is disregarding a very effective way of code documentation. It’s easy, fast, and very straight-to-the-point, since it’s done right then and there when it’s needed. Comments are also efficient considering the fact that they can be read at the exact moment of doubt. They can, however, be overused. And that brings us to the next recommendation.

5) Avoid Abusing Comments
  Comments aren’t to be treated lightly. When commenting on code, the current functionality is explained in terms of variables and results. What comments are NOT made for is:
  - Writing explanatory notes to self (e.g. /* Will finish this later… */).
  - Blaming stuff on other people (e.g. /* John coded this. Ask him. */).
  - Writing vague statements (e.g. /* This is another math function. */).
  - Erasing chunks of code. Sometimes people are not sure of erasing things and it’s not absolutely evil to comment that code instead.
  What’s not right is to just leave it afterwards. It’ll be terribly confusing. If the code will be documented via embedded comments, the team members need to make sure those comments are there for a reason.

6) Avoid Extremely Large Functions
  In the process of adding functionality to an application, its coded methods tend to grow accordingly. One can come across functions that consist of up to a hundred lines of code, and this tends to become confusing.
  A better practice would be to break up large functions into smaller ones. Some procedures may even be repeating themselves amongst the rest of the functions conforming the whole application process. The team could make better use of those repeated procedures through separate functions. This, however, should have been avoided from the beginning if the first recommendation was carried out correctly.

7) Use Naming Standards for Functions and Variables
  Whenever a variable or a function is created, its name should be descriptive enough as to give a general idea of what it does or what it’s for. 
  There are companies that have their own pre-established naming standards (e.g. The prefix ‘int_’ for any numeric variables), but there are also many companies in which the employees do not keep these standards. Laziness makes people work double the time during future redesigns, so everyone needs to start learning how to get rid of it.

8) Treat Changes with Caution
  The correct appliance of changes summarizes a lot of what has been previously said, like commenting meaningfully and not disrupting indentations. Nevertheless, it needs to be emphasized. Whenever there’s a need for adding, removing, or changing something, there should also be an awareness of not meddling with previous efforts for maintaining the code clean and ordered.

  This mainly involves:

  Keeping the correct indentations (e.g. when inserting an IF clause, its contents’ indentations will be augmented).
  Commenting on the modification made or broadening the existing comments.
  Respecting standards in use.

9) Avoid Indiscriminate Mixing of Coding Languages
  In-line CSS styling and scattered JavaScript tags with short procedures within them are very good examples of incorrect mixing of coding languages throughout your development process. Ignoring this principle will result in huge element tags with an embedded STYLE property, lots of interruptions in the flow of the structure because of embedded functions, and of course lots and lots of confusion.

10) Summarise Your Imports
  Even though it is much better to have additional coding languages imported from different files, this shouldn’t be abused. If there are too many style sheets, they can probably be summarized into one or two.
  This won’t only save space and make things look cleaner, but it will also save loading time. Each imported file is an HTTP request that tampers with the performance of your application. So apart from being a consideration for tidiness, it is also a consideration for efficiency.
 
To Sum Up



